{"version":3,"sources":["components/Search.jsx","services/captions.js","components/Caption.jsx","components/VideoPlayer.jsx","App.js","services/videoId.js","serviceWorker.js","index.js"],"names":["SearchForm","styled","form","SearchText","h3","InputSearch","input","Search","props","useState","url","setUrl","onSubmit","event","preventDefault","placeholder","onChange","target","value","getCaptions","id","a","fetch","response","text","data","convertData","console","log","captions","xmlCaptions","DOMParser","parseFromString","getElementsByTagName","i","length","push","start","Number","getAttribute","duration","textContent","replace","CaptionContainer","div","DelayContainer","DelayText","CaptionWrapper","Caption","setCaptions","currentCaption","setCurrentCaption","delay","setDelay","useEffect","captionsFromApi","fetchCaptions","currentTime","caption","obtainCurrentCaption","type","min","max","e","VideoContainer","playerWidth","window","innerWidth","VideoPlayer","setCurrentTime","isRunning","setIsRunning","opts","height","width","playerVars","autoplay","controls","videoId","onReady","onStateChange","getCurrentTime","onPlay","setInterval","App","setVideoId","split","getId","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9455ad46.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst SearchForm = styled.form`\n    display: flex;\n    margin: 20px 0px;\n    justify-content: center;\n`;\n\nconst SearchText = styled.h3`\n    margin: 0px;\n    margin-right: 30px;\n    color: #bf9a78;\n`;\n\nconst InputSearch = styled.input`\n    height: 30px;\n    width: 50%;\n    border-radius: 5px;\n`;\n\nconst Search = (props) => {\n    const [url, setUrl] = useState('');\n    return (\n        <SearchForm\n            onSubmit={(event) => {\n                props.setUrl(url);\n                event.preventDefault();\n            }}\n        >\n            <SearchText>Video Url:</SearchText>\n            <InputSearch\n                placeholder=\"Enter here video url\"\n                onChange={(event) => {\n                    setUrl(event.target.value);\n                }}\n            />\n        </SearchForm>\n    );\n};\n\nexport default Search;\n","export async function getCaptions(id) {\n    if (!id) return '';\n    const response = await fetch(\n        `https://video.google.com/timedtext?lang=en&v=${id}`\n    );\n    let data = await response.text();\n    data = convertData(data);\n    if (!data) {\n        console.log('Error, video doesnt have captions ');\n        return '';\n    }\n    return data;\n}\n\nfunction convertData(data) {\n    const captions = [];\n    let parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(data, 'text/xml');\n    const xmlCaptions = xmlDoc.getElementsByTagName('text');\n    for (let i = 0; i < xmlCaptions.length; i++) {\n        // console.log(xmlCaptions[i].getAttribute('start'));\n        // console.log(xmlCaptions[i].textContent.replace('&#39;', \"'\"));\n        captions.push({\n            start: Number(xmlCaptions[i].getAttribute('start')),\n            duration: Number(xmlCaptions[i].getAttribute('dur')),\n            text: xmlCaptions[i].textContent\n                .replace('&#39;', \"'\")\n                .replace('&quot;', '\"'),\n        });\n    }\n    return captions;\n}\n","import React, { useState, useEffect } from 'react';\nimport { getCaptions } from '../services/captions';\nimport styled from '@emotion/styled';\n\nconst CaptionContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n`;\n\nconst DelayContainer = styled.div`\n    display: flex;\n`;\n\nconst DelayText = styled.h3`\n    margin: 0px;\n    color: #bf9a78;\n`;\n\nconst CaptionWrapper = styled.div`\n    padding: 32px;\n    background-color: hotpink;\n    font-size: 24px;\n    border-radius: 4px;\n    color: black;\n    font-weight: bold;\n`;\n\nconst Caption = (props) => {\n    const [captions, setCaptions] = useState([]);\n    const [currentCaption, setCurrentCaption] = useState('HOLA');\n    const [delay, setDelay] = useState(2);\n\n    useEffect(() => {\n        async function fetchCaptions() {\n            const captionsFromApi = await getCaptions(props.id);\n            setCaptions(captionsFromApi);\n            console.log('FETCHING DATAAAAAAA REEEEEEEEEE');\n        }\n        fetchCaptions();\n    }, [props.id]);\n\n    useEffect(() => {\n        const obtainCurrentCaption = (currentTime) => {\n            for (const caption of captions) {\n                if (caption.start + caption.duration >= currentTime - delay) {\n                    setCurrentCaption(caption.text);\n                    return true;\n                }\n            }\n            return false;\n        };\n        obtainCurrentCaption(props.currentTime);\n    }, [props.currentTime, captions, delay]);\n\n    return (\n        <CaptionContainer>\n            <DelayContainer>\n                <DelayText>Delay (sg) : </DelayText>\n                <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"60\"\n                    value={delay}\n                    onChange={(e) => setDelay(e.target.value)}\n                />\n            </DelayContainer>\n            <CaptionWrapper>{currentCaption}</CaptionWrapper>\n        </CaptionContainer>\n    );\n};\n\nexport default Caption;\n","import React, { useState } from 'react';\nimport Caption from './Caption';\nimport YouTube from 'react-youtube';\nimport styled from '@emotion/styled';\n\nconst VideoContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst playerWidth = window.innerWidth > 420 ? 700 : window.innerWidth;\nconst playerHeight = 426;\nconst VideoPlayer = (props) => {\n    const [currentTime, setCurrentTime] = useState(0);\n    const [isRunning, setIsRunning] = useState(false);\n\n    const opts = {\n        height: playerHeight,\n        width: playerWidth,\n        playerVars: {\n            autoplay: 1,\n            controls: 1,\n        },\n    };\n    function onReady(event) {\n        console.log('todo ok');\n    }\n\n    function onChange(event) {\n        if (event.data === 1) {\n            setIsRunning(true);\n        } else {\n            setIsRunning(false);\n        }\n        setCurrentTime(event.target.getCurrentTime());\n    }\n\n    return (\n        <VideoContainer>\n            <YouTube\n                videoId={props.id}\n                opts={opts}\n                onReady={onReady}\n                onStateChange={onChange}\n                onPlay={(e) => {\n                    setInterval(() => {\n                        if (isRunning) {\n                            setCurrentTime(e.target.getCurrentTime());\n                        }\n                    }, 500);\n                }}\n            />\n            <Caption id={props.id} currentTime={currentTime}></Caption>\n        </VideoContainer>\n    );\n};\n\nexport default VideoPlayer;\n","import React, { useState, useEffect } from 'react';\nimport Search from './components/Search';\nimport VideoPlayer from './components/VideoPlayer';\nimport { getId } from './services/videoId';\n\nfunction App() {\n    const [url, setUrl] = useState(\n        'https://www.youtube.com/watch?v=sP2qqMegNKA'\n    );\n    const [videoId, setVideoId] = useState('');\n\n    useEffect(() => {\n        const id = getId(url);\n        setVideoId(id);\n    }, [url]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"AppContainer\">\n                <Search setUrl={setUrl}></Search>\n                <VideoPlayer id={videoId}></VideoPlayer>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","export function getId(url) {\n    if (!url) return '';\n    return url.split('=')[1].split('&')[0];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}